name: Test Dev Container

# トリガーの設定
# main ブランチへのプッシュとプルリクエストで実行
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # テンプレートの自動検出ジョブ
  # src ディレクトリ内のテンプレートを検索し、テスト対象のリストを生成
  detect-templates:
    runs-on: ubuntu-latest
    outputs:
      templates: ${{ steps.set-templates.outputs.templates }}
    steps:
      - uses: actions/checkout@v4

      # src ディレクトリ内のテンプレートを検出し、JSON 配列として出力
      - name: Get template list
        id: set-templates
        run: |
          templates=$(ls src | jq -R -s -c 'split("\n")[:-1]')
          echo "templates=$templates" >> $GITHUB_OUTPUT

  # 各テンプレートのテストジョブ
  # detect-templates ジョブの出力を使用して matrix で並列実行
  test-templates:
    needs: detect-templates
    runs-on: ubuntu-latest
    strategy:
      matrix:
        template: ${{ fromJson(needs.detect-templates.outputs.templates) }}
        include:
          - template: flutter
            image: ghcr.io/techiro/devcontainer-template/flutter:latest
            platform: linux/amd64
      # 1つのテンプレートのテスト失敗が他に影響しないようにする
      fail-fast: false

    name: Test ${{ matrix.template }} template
    steps:
      - uses: actions/checkout@v4

      # テンプレートのメタデータを読み込み
      # devcontainer-template.json からプラットフォーム情報などを取得
      - name: Load template metadata
        id: metadata
        run: |
          if [ -f "src/${{ matrix.template }}/devcontainer-template.json" ]; then
            echo "Using template metadata from devcontainer-template.json"
            platforms=$(jq -r '.platforms[]' "src/${{ matrix.template }}/devcontainer-template.json" | tr '\n' ',' | sed 's/,$//')
            echo "platforms=$platforms" >> $GITHUB_OUTPUT
          else
            echo "No metadata file found, using default platform"
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
          fi

      # Dev Container のビルドとテスト実行
      # devcontainers/ci アクションを使用してコンテナをビルドし、テストを実行
      - name: Build and test Dev Container
        uses: devcontainers/ci@v0.3
        with:
          imageName: ghcr.io/techiro/devcontainer-template/${{ matrix.template }}:latest
          platform: ${{ steps.metadata.outputs.platforms }}
          runCmd: cd test/${{ matrix.template }} && bash test.sh

      # devcontainer.json の構文チェック
      - name: Validate devcontainer.json
        run: |
          npx @devcontainers/cli validate src/${{ matrix.template }}/.devcontainer/devcontainer.json

      # テンプレートの設定ファイルの構文チェック
      - name: Validate template.json
        run: |
          if [ -f "src/${{ matrix.template }}/devcontainer-template.json" ]; then
            npx @devcontainers/cli template-info validate src/${{ matrix.template }}
          else
            echo "No template.json found to validate"
            exit 1
          fi
